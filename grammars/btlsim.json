{
    "scopeName": "source.freebasic",
    "fileTypes": [
        "bs"
    ],
    "firstLineMatch": "-[*]-( Mode:)? FreeBASIC -[*]-",
    "name": "BtlSim",
    "patterns": [
        {
            "include": "#preprocessor-rule-enabled"
        },
        {
            "include": "#preprocessor-rule-disabled"
        },
        {
            "include": "#preprocessor-rule-other"
        },
        {
            "include": "#comments"
        },
        {
            "match": "\\b(Type|Namespace|Declare|Dcl|Var|End|Case|Continue|Default|Do|Loop|Else|For|Goto|If|ElseIf|Then|End if|Return|Next|Function|Action|Until|Select|Wend|With|While|as)\\b",
            "name": "keyword.control.freebasic"
        },
        {
            "match": "\\b(pointer|POINTER|ptr|PTR|unsigned|UNSIGNED)\\b",
            "name": "storage.type.freebasic"
        },
        {
            "match": "\\b(Const|Extern|Static|Byval|Byref|Bydesc)\\b",
            "name": "storage.modifier.freebasic"
        },
        {
            "comment": "common C constant naming idiom -- kConstantVariable",
            "match": "\\bk[A-Z]\\w*\\b",
            "name": "constant.other.variable.mac-classic.freebasic"
        },
        {
            "match": "\\bg[A-Z]\\w*\\b",
            "name": "variable.other.readwrite.global.mac-classic.freebasic"
        },
        {
            "match": "\\bs[A-Z]\\w*\\b",
            "name": "variable.other.readwrite.static.mac-classic.freebasic"
        },
        {
            "match": "\\b(NULL|true|false|TRUE|FALSE)\\b",
            "name": "constant.language.freebasic"
        },
        {
            "include": "#sizeof"
        },
        {
            "match": "\\b((&(b|B)[0-1]*)(&(h|H)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
            "name": "constant.numeric.freebasic"
        },
        {
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.freebasic"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.freebasic"
                }
            },
            "name": "string.quoted.double.freebasic",
            "patterns": [
                {
                    "include": "#string_escaped_char"
                },
                {
                    "include": "#string_placeholder"
                }
            ]
        },
        {
            "begin": "(?x)\n        \t\t^\\s*\\#\\s*(define)\\s+             # define\n        \t\t((?<id>[a-zA-Z_][a-zA-Z0-9_]*))  # macro name\n        \t\t(?:                              # and optionally:\n        \t\t    (\\()                         # an open parenthesis\n        \t\t        (\n        \t\t            \\s* \\g<id> \\s*       # first argument\n        \t\t            ((,) \\s* \\g<id> \\s*)*  # additional arguments\n        \t\t            (?:\\.\\.\\.)?          # varargs ellipsis?\n        \t\t        )\n        \t\t    (\\))                         # a close parenthesis\n        \t\t)?\n        \t",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.import.define.freebasic"
                },
                "2": {
                    "name": "entity.name.function.preprocessor.freebasic"
                },
                "4": {
                    "name": "punctuation.definition.parameters.begin.freebasic"
                },
                "5": {
                    "name": "variable.parameter.preprocessor.freebasic"
                },
                "7": {
                    "name": "punctuation.separator.parameters.freebasic"
                },
                "8": {
                    "name": "punctuation.definition.parameters.end.freebasic"
                }
            },
            "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
            "name": "meta.preprocessor.macro.freebasic",
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)",
                    "name": "punctuation.separator.continuation.freebasic"
                },
                {
                    "include": "$base"
                }
            ]
        },
        {
            "begin": "^\\s*#\\s*(error|warning)\\b",
            "captures": {
                "1": {
                    "name": "keyword.control.import.error.freebasic"
                }
            },
            "end": "(?<!\\\\)(?=\\n)",
            "name": "meta.preprocessor.diagnostic.freebasic",
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)",
                    "name": "punctuation.separator.continuation.freebasic"
                }
            ]
        },
        {
            "begin": "^\\s*#\\s*(include)\\b\\s+",
            "captures": {
                "1": {
                    "name": "keyword.control.import.include.freebasic"
                }
            },
            "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
            "name": "meta.preprocessor.freebasic.include",
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)",
                    "name": "punctuation.separator.continuation.freebasic"
                },
                {
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.freebasic"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.freebasic"
                        }
                    },
                    "name": "string.quoted.double.include.freebasic"
                }
            ]
        },
        {
            "include": "#pragma-mark"
        },
        {
            "begin": "^\\s*#\\s*(Assert|Libpath|Lang|Define|Defined|ElseIf|Else|If|Ifdef|Ifndef|Line|Pragma|Undef|Print|Error|Inclib|Macro|Endmacro)\\b",
            "captures": {
                "1": {
                    "name": "keyword.control.import.freebasic"
                }
            },
            "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
            "name": "meta.preprocessor.freebasic",
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)",
                    "name": "punctuation.separator.continuation.freebasic"
                }
            ]
        },
        {
            "match": "\\b(Byte|Ubyte|Short|Ushort|Integer|Uinteger|Long|Ulong|Longint|Ulongint|Double|Single|Object|Any|String|Zstring|Wstring)\\b",
            "name": "support.type.sys-types.freebasic"
        },
        {
            "match": "\\b(Pthread_attr_t|Pthread_cond_t|Pthread_condattr_t|Pthread_mutex_t|Pthread_mutexattr_t|Pthread_once_t|Pthread_rwlock_t|Pthread_rwlockattr_t|Pthread_t|Pthread_key_t)\\b",
            "name": "support.type.pthread.freebasic"
        },
        {
            "match": "\\b(Int8_t|Int16_t|Int32_t|Int64_t|Uint8_t|Uint16_t|Uint32_t|Uint64_t|Int_least8_t|Int_least16_t|Int_least32_t|Int_least64_t|Uint_least8_t|Uint_least16_t|Uint_least32_t|Uint_least64_t|Int_fast8_t|Int_fast16_t|Int_fast32_t|Int_fast64_t|Uint_fast8_t|Uint_fast16_t|Uint_fast32_t|Uint_fast64_t|Intptr_t|Uintptr_t|Intmax_t|Intmax_t|Uintmax_t|Uintmax_t)\\b",
            "name": "support.type.stdint.freebasic"
        },
        {
            "comment": "Reserved POSIX types",
            "match": "\\b([a-z0-9_]+_t)\\b",
            "name": "support.type.posix-reserved.freebasic"
        },
        {
            "include": "#block"
        },
        {
            "begin": "(?x)\n    \t\t(?:  ^                                 # begin-of-line\n    \t\t  |  \n    \t\t     (?: (?= \\s )           (?<!Else|New|Return) (?<=\\w)      #  or word + space before name\n    \t\t       | (?= \\s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name\n    \t\t     )\n    \t\t)\n    \t\t(\\s*) (?!(While|For|Do|If|Else|Select|Case|Enum|Return|Sizeof|[cr]?iterate)\\s*\\()\n    \t\t(\n    \t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name\n    \t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )  # if it is a C++ operator\n    \t\t)\n    \t\t \\s*(?=\\()",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.whitespace.function.leading.freebasic"
                },
                "3": {
                    "name": "entity.name.function.freebasic"
                },
                "4": {
                    "name": "punctuation.definition.parameters.freebasic"
                }
            },
            "end": "(?<=\\})|(?=#)|(\n)",
            "name": "meta.function.freebasic",
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#parens"
                },
                {
                    "match": "\\bconst\\b",
                    "name": "storage.modifier.freebasic"
                },
                {
                    "include": "#block"
                }
            ]
        }
    ],
    "repository": {
        "access": {
            "captures": {
                "1": {
                    "name": "punctuation.separator.variable-access.freebasic"
                },
                "2": {
                    "name": "variable.other.dot-access.freebasic"
                }
            },
            "match": "(\\.)([a-zA-Z_][a-zA-Z_0-9]*)\\b(?!\\s*\\()"
        },
        "block": {
            "patterns": [
                {
                    "begin": "\\{",
                        "beginCaptures": {
                            "0": {
                                "name": "punctuation.section.block.begin.freebasic"
                            }
                        },
                        "end": "\\}",
                        "endCaptures": {
                            "0": {
                                "name": "punctuation.section.block.end.freebasic"
                            }
                        },
                        "name": "meta.block.freebasic",
                        "patterns": [
                            {
                                "include": "#block_innards"
                            }
                        ]
                    }
                ]
            },
            "block_innards": {
                "patterns": [
                    {
                        "include": "#preprocessor-rule-enabled-block"
                    },
                    {
                        "include": "#preprocessor-rule-disabled-block"
                    },
                    {
                        "include": "#preprocessor-rule-other-block"
                    },
                    {
                        "include": "#sizeof"
                    },
                    {
                        "include": "#access"
                    },
                    {
                        "include": "#libc"
                    },
                    {
                        "include": "#libfb"
                    },
                    {
                        "include": "#c_function_call"
                    },
                    {
                        "captures": {
                            "1": {
                                "name": "variable.other.freebasic"
                            },
                            "2": {
                                "name": "punctuation.definition.parameters.freebasic"
                            }
                        },
                        "match": "(?x)\n\t\t\t        (?x)\n\t\t\t(?:  \n\t\t\t     (?: (?= \\s )           (?<!Else|New|Return) (?<=\\w)\\s+      #  or word + space before name\n\t\t\t     )\n\t\t\t)\n\t\t\t(\n\t\t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name\n\t\t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )?  # if it is a C++ operator\n\t\t\t)\n\t\t\t \\s*(\\()",
                        "name": "meta.initialization.freebasic"
                    },
                    {
                        "include": "#block"
                    },
                    {
                        "include": "$base"
                    }
                ]
            },
            "c_function_call": {
                "captures": {
                    "1": {
                        "name": "punctuation.whitespace.function-call.leading.freebasic"
                    },
                    "2": {
                        "name": "support.function.any-method.freebasic"
                    },
                    "3": {
                        "name": "punctuation.definition.parameters.freebasic"
                    }
                },
                "match": "(?x) (?: (?= \\s )  (?:(?<=Else|New|Return) | (?<!\\w)) (\\s+))?\n\t\t\t(\\b \n\t\t\t\t(?!(While|For|Do|If|Else|Switch|Catch|Enumerate|Return|Sizeof|[cr]?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n\t\t\t)\n\t\t\t \\s*(\\()",
                "name": "meta.function-call.freebasic"
            },
            "comments": {
                "patterns": [
                    {
                        "captures": {
                            "1": {
                                "name": "meta.toc-list.banner.block.freebasic"
                            }
                        },
                        "match": "^/\\' =(\\s*.*?)\\s*= \\'/$\\n?",
                        "name": "comment.block.freebasic"
                    },
                    {
                        "begin": "/\\'",
                        "beginCaptures": {
                            "0": {
                                "name": "punctuation.definition.comment.begin.freebasic"
                            }
                        },
                        "end": "\\'/",
                        "endCaptures": {
                            "0": {
                                "name": "punctuation.definition.comment.end.freebasic"
                            }
                        },
                        "name": "comment.block.freebasic"
                    },
                    {
                        "match": "\\'/.*\\n",
                        "name": "invalid.illegal.stray-comment-end.freebasic"
                    },
                    {
                        "begin": "(^[ \\t]+)?(?=')",
                        "beginCaptures": {
                            "1": {
                                "name": "punctuation.whitespace.comment.leading.freebasic"
                            }
                        },
                        "end": "(?!\\G)",
                        "patterns": [
                            {
                                "begin": "'",
                                "beginCaptures": {
                                    "0": {
                                        "name": "punctuation.definition.comment.freebasic"
                                    }
                                },
                                "end": "\\n|(?=\\?>)",
                                "name": "comment.line.double-slash.freebasic"
                            }
                        ]
                    }
                ]
            },
            "disabled": {
                "begin": "^\\s*#\\s*if(n?def)?\\b.*$",
                "comment": "eat nested preprocessor if(def)s",
                "end": "^\\s*#\\s*endif\\b",
                "patterns": [
                    {
                        "include": "#disabled"
                    },
                    {
                        "include": "#pragma-mark"
                    }
                ]
            },
            "libc": {
                "captures": {
                    "1": {
                        "name": "punctuation.whitespace.support.function.leading.freebasic"
                    },
                    "2": {
                        "name": "support.function.C99.freebasic"
                    }
                },
                "match": "(\\s*)\\b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|Type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|Dcl(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\\b"
            },
            "libfb": {
                "captures": {
                    "1": {
                        "name": "punctuation.whitespace.support.function.leading.freebasic"
                    },
                    "2": {
                        "name": "support.function.fb10.freebasic"
                    }
                },
                "match": "(\\s*)\\b(a(bs|c(c(e(ss))|os)|l(i(as)|l(o(c(a(te))))|p(ha))|n(d(a(l(so)))|y)|p(p(e(nd)))|s(s(e(r(t(w(a(rn))))))|c|in|m)|t(a(n2)|n))|b(a(se)|e(ep)|i(n(a(ry))|t(r(e(s(et)))|s(et)))|l(o(ad))|s(a(ve))|y(r(ef)|te|v(al)))|c(a(l(l(o(c(a(te)))))|s[et])|b(y(te))|d(bl|e(cl))|h(a(in)|d(ir)|r)|i(nt|r(c(le)))|l(a(ss)|e(ar)|n(g(i(nt)))|o(se)|s)|o(l(or)|m(m(a(nd)|on))|n(s(t(r(u(c(t(or))))))|d(b(r(o(a(d(c(a(st)))))))|c(r(e(a(te))))|d(e(s(t(r(oy)))))|s(i(g(n(al))))|w(a(it)))|t(i(n(ue))))|s)|p(tr)|s(h(o(rt))|i(gn)|ng|r(l(in)))|u(b(y(te))|i(nt)|l(n(g(i(nt))))|n(sg)|r(d(ir))|s(h(o(rt))|t(om)))|v(d|i|l(o(n(g(i(nt)))))|s(h(o(rt)))))|d(a(t(a|e(a(dd)|d(i(ff))|p(a(rt))|s(e(r(i(al))))|v(a(l(ue)))))|y)|e(a(l(l(o(c(a(te))))))|c(l(a(re)))|f(b(y(te))|d(bl)|i(nt)|l(n(g(i(nt))))|s(h(o(rt))|ng|tr)|u(b(y(te))|i(nt)|l(n(g(i(nt))))|s(h(o(rt)))))|l(e(te))|s(t(r(u(c(t(or)))))))|i[mr]|o(u(b(le)))|r(aw)|y(n(a(m(ic)))|l(i(b(f(r(ee))|l(o(ad))|s(y(m(b(ol)))))))))|e(l(s(e(if)))|n(c(o(d(i(ng))))|d|um|v(i(r(on))))|s(c(a(pe)))|of|qv|r(a(se)|fn|l|mn|r(or))|x(e(c|p(a(th)))|it|p(l(i(c(it)))|o(rt))|t(e(rn))))|f(a(l(se))|b(o(o(l(e(an)))))|i(e(ld)|l(e(a(t(tr))|c(o(py))|d(a(t(e(t(i(me))))))|e(x(i(s(ts))))|l(en)))|x)|l(ip)|o(r(m(at)))|r(ac|e(e(f(i(le)))))|u(n(c(t(i(on))))))|g(e(t(j(o(y(s(t(i(ck))))))|k(ey)|m(o(u(se)))))|o(s(ub)|to))|h(ex|i(b(y(te))|w(o(rd)))|o(ur))|i(f|if|m(a(g(e(c(o(n(v(e(r(t(r(ow)))))))|r(e(a(te))))|d(e(s(t(r(oy))))))))|p(o(rt)))|n(k(ey)|p(u(t$))|s(tr)|t(e(g(er))))|s(d(a(te))))|k(i(ll))|l(b(o(u(nd)))|c(a(se))|e(ft|n|t)|i(b|ne)|p(t|os|r(i(nt)))|o(b(y(te))|c(a(l|te)|k)|f|g|n(g(i(nt)))|op|w(o(rd)))|s(et)|t(r(im)))|m(i(d|n(u(te)))|k(d(ir)|i|l(o(n(g(i(nt)))))|s(h(o(rt))))|o(d|n(t(h(n(a(me))))))|u(l(t(i(k(ey))))|t(e(x(c(r(e(a(te))))|d(e(s(t(r(oy)))))|l(o(ck))|u(n(l(o(ck)))))))))|n(a(m(e(s(p(a(ce))))))|o(k(e(y(w(o(rd)))))|t|w)|e(xt|w)|u(ll))|o(ct|f(f(s(e(t(of)))))|n(ce)|p(e(n|r(a(t(or))))|t(i(on)))|r(e(l(se)))|u(t(p(ut)))|v(e(r(l(o(ad))))))|p(a(i(nt)|l(e(t(te)))|s(c(al)))|c(o(py))|e(ek)|i(pe)|m(ap)|o(i(n(t(er)))|ke|s)|r(e(s(e(r(ve)|t)))|i(nt|v(a(te)))|o(c(p(tr))|p(e(r(ty)))|t(e(c(t(ed))))))|s(et)|tr|u(b(l(ic))|t))|r(a(n(d(o(m(i(ze))))))|e(a(d|l(l(o(c(a(te))))))|d(im)|m|s(et|t(o(re))|u(me))|t(u(rn)))|g(ba)|i(g(ht))|m(d(ir))|nd|s(et)|t(r(im))|un)|s(a(dd)|c(o(pe)|r(n|e(e(n(c(o(py|n(t(r(ol)))))|e(v(e(nt)))|i(n(fo))|g(l(p(r(oc))))|l(i(st)|o(ck))|p(tr)|r(es)|s(et|y(nc))|u(n(l(o(ck)))))))))|e(c(o(nd))|ek|l(e(ct))|t(d(a(te))|e(n(v(i(r(on)))))|m(o(u(se)))|t(i(me))))|gn|h(a(r(ed))|e(ll)|o(rt)|r|l)|i(n(g(le))|z(e(of)))|l(e(ep))|p(a(ce)|c)|qr|t(a(t(ic))|d(c(a(ll)))|ep|op|r(i(ng)|p(tr)))|ub|w(ap)|y(s(t(em))))|t(a[bn]|h(en|is|r(e(a(d(c(r(e(a(te))))|w(a(it)))))))|i(m(e(s(e(r(i(al))))|v(a(l(ue)))|r)))|o|r(a(ns)|im|ue)|y(pe))|u(b(o(u(nd))|y(te))|c(a(se))|i(n(t(e(g(er)))))|l(o(n(g(i(nt)))))|n(i(on)|l(o(ck))|s(i(g(n(ed))))|t(il))|s(h(o(rt))|i(ng)))|v(a(_(a(rg)|f(i(r(st)))|n(e(xt)))|l(l(ng)|i(nt)|u(i(nt)|l(ng)))|r(p(tr)))|i(ew))|w(a(it)|b(in)|c(hr)|e(e(k(d(a(y(n(a(me)))))))|nd)|h(i(le)|ex)|i(d(th)|n(d(o(w(t(i(t(le))))))|p(ut))|th)|o(ct)|r(i(te))|s(p(a(ce))|t(r(i(ng)))))|x(or)|y(e(ar))|z(s(t(r(i(ng))))))\\b"
            },
            "parens": {
                "begin": "\\(",
                "beginCaptures": {
                    "0": {
                        "name": "punctuation.section.parens.begin.freebasic"
                    }
                },
                "end": "\\)",
                "endCaptures": {
                    "0": {
                        "name": "punctuation.section.parens.end.freebasic"
                    }
                },
                "name": "meta.parens.freebasic",
                "patterns": [
                    {
                        "include": "$base"
                    }
                ]
            },
            "pragma-mark": {
                "captures": {
                    "1": {
                        "name": "meta.preprocessor.freebasic"
                    },
                    "2": {
                        "name": "keyword.control.import.pragma.freebasic"
                    },
                    "3": {
                        "name": "meta.toc-list.pragma-mark.freebasic"
                    }
                },
                "match": "^\\s*(#\\s*(pragma\\s+mark)\\s+(.*))",
                "name": "meta.section"
            },
            "preprocessor-rule-disabled": {
                "begin": "^\\s*(#(if)\\s+(0)\\b).*",
                "captures": {
                    "1": {
                        "name": "meta.preprocessor.freebasic"
                    },
                    "2": {
                        "name": "keyword.control.import.if.freebasic"
                    },
                    "3": {
                        "name": "constant.numeric.preprocessor.freebasic"
                    }
                },
                "end": "^\\s*(#\\s*(endif)\\b)",
                "patterns": [
                    {
                        "begin": "^\\s*(#\\s*(else)\\b)",
                        "captures": {
                            "1": {
                                "name": "meta.preprocessor.freebasic"
                            },
                            "2": {
                                "name": "keyword.control.import.else.freebasic"
                            }
                        },
                        "end": "(?=^\\s*#\\s*endif\\b)",
                        "patterns": [
                            {
                                "include": "$base"
                            }
                        ]
                    },
                    {
                        "begin": "",
                        "end": "(?=^\\s*#\\s*(else|endif)\\b)",
                        "name": "comment.block.preprocessor.if-branch",
                        "patterns": [
                            {
                                "include": "#disabled"
                            },
                            {
                                "include": "#pragma-mark"
                            }
                        ]
                    }
                ]
            },
            "preprocessor-rule-disabled-block": {
                "begin": "^\\s*(#(if)\\s+(0)\\b).*",
                "captures": {
                    "1": {
                        "name": "meta.preprocessor.freebasic"
                    },
                    "2": {
                        "name": "keyword.control.import.if.freebasic"
                    },
                    "3": {
                        "name": "constant.numeric.preprocessor.freebasic"
                    }
                },
                "end": "^\\s*(#\\s*(endif)\\b)",
                "patterns": [
                    {
                        "begin": "^\\s*(#\\s*(else)\\b)",
                        "captures": {
                            "1": {
                                "name": "meta.preprocessor.freebasic"
                            },
                            "2": {
                                "name": "keyword.control.import.else.freebasic"
                            }
                        },
                        "end": "(?=^\\s*#\\s*endif\\b)",
                        "patterns": [
                            {
                                "include": "#block_innards"
                            }
                        ]
                    },
                    {
                        "begin": "",
                        "end": "(?=^\\s*#\\s*(else|endif)\\b)",
                        "name": "comment.block.preprocessor.if-branch.in-block",
                        "patterns": [
                            {
                                "include": "#disabled"
                            },
                            {
                                "include": "#pragma-mark"
                            }
                        ]
                    }
                ]
            },
            "preprocessor-rule-enabled": {
                "begin": "^\\s*(#(if)\\s+(0*1)\\b)",
                "captures": {
                    "1": {
                        "name": "meta.preprocessor.freebasic"
                    },
                    "2": {
                        "name": "keyword.control.import.if.freebasic"
                    },
                    "3": {
                        "name": "constant.numeric.preprocessor.freebasic"
                    }
                },
                "end": "^\\s*(#\\s*(endif)\\b)",
                "patterns": [
                    {
                        "begin": "^\\s*(#\\s*(else)\\b).*",
                        "captures": {
                            "1": {
                                "name": "meta.preprocessor.freebasic"
                            },
                            "2": {
                                "name": "keyword.control.import.else.freebasic"
                            }
                        },
                        "contentName": "comment.block.preprocessor.else-branch",
                        "end": "(?=^\\s*#\\s*endif\\b)",
                        "patterns": [
                            {
                                "include": "#disabled"
                            },
                            {
                                "include": "#pragma-mark"
                            }
                        ]
                    },
                    {
                        "begin": "",
                        "end": "(?=^\\s*#\\s*(else|endif)\\b)",
                        "patterns": [
                            {
                                "include": "$base"
                            }
                        ]
                    }
                ]
            },
            "preprocessor-rule-enabled-block": {
                "begin": "^\\s*(#(if)\\s+(0*1)\\b)",
                "captures": {
                    "1": {
                        "name": "meta.preprocessor.freebasic"
                    },
                    "2": {
                        "name": "keyword.control.import.if.freebasic"
                    },
                    "3": {
                        "name": "constant.numeric.preprocessor.freebasic"
                    }
                },
                "end": "^\\s*(#\\s*(endif)\\b)",
                "patterns": [
                    {
                        "begin": "^\\s*(#\\s*(else)\\b).*",
                        "captures": {
                            "1": {
                                "name": "meta.preprocessor.freebasic"
                            },
                            "2": {
                                "name": "keyword.control.import.else.freebasic"
                            }
                        },
                        "contentName": "comment.block.preprocessor.else-branch.in-block",
                        "end": "(?=^\\s*#\\s*endif\\b)",
                        "patterns": [
                            {
                                "include": "#disabled"
                            },
                            {
                                "include": "#pragma-mark"
                            }
                        ]
                    },
                    {
                        "begin": "",
                        "end": "(?=^\\s*#\\s*(else|endif)\\b)",
                        "patterns": [
                            {
                                "include": "#block_innards"
                            }
                        ]
                    }
                ]
            },
            "preprocessor-rule-other": {
                "begin": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
                "captures": {
                    "1": {
                        "name": "meta.preprocessor.freebasic"
                    },
                    "2": {
                        "name": "keyword.control.import.freebasic"
                    }
                },
                "end": "^\\s*(#\\s*(endif)\\b)",
                "patterns": [
                    {
                        "include": "$base"
                    }
                ]
            },
            "preprocessor-rule-other-block": {
                "begin": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
                "captures": {
                    "1": {
                        "name": "meta.preprocessor.freebasic"
                    },
                    "2": {
                        "name": "keyword.control.import.freebasic"
                    }
                },
                "end": "^\\s*(#\\s*(endif)\\b)",
                "patterns": [
                    {
                        "include": "#block_innards"
                    }
                ]
            },
            "sizeof": {
                "match": "\\b(sizeof)\\b",
                "name": "keyword.operator.sizeof.freebasic"
            },
            "string_escaped_char": {
                "patterns": [
                    {
                        "match": "\\\\(\\\\|[abefnprtv'\"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})",
                        "name": "constant.character.escape.freebasic"
                    },
                    {
                        "match": "\\\\.",
                        "name": "invalid.illegal.unknown-escape.freebasic"
                    }
                ]
            },
            "string_placeholder": {
                "patterns": [
                    {
                        "match": "(?x)%\n    \t\t\t\t\t\t(\\d+\\$)?                             # field (argument #)\n    \t\t\t\t\t\t[#0\\- +']*                           # flags\n    \t\t\t\t\t\t[,\n:_]?                              # separator character (AltiVec)\n    \t\t\t\t\t\t((-?\\d+)|\\*(-?\\d+\\$)?)?              # minimum field width\n    \t\t\t\t\t\t(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?         # precision\n    \t\t\t\t\t\t(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n    \t\t\t\t\t\t[diouxXDOUeEfFgGaACcSspn%]           # conversion type\n    \t\t\t\t\t",
                        "name": "constant.other.placeholder.freebasic"
                    },
                    {
                        "match": "%",
                        "name": "invalid.illegal.placeholder.freebasic"
                    }
                ]
            }
        }
    }
